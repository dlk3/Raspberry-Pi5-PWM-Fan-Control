#!/usr/bin/env python

#  MIT License
#
#  Copyright (C) 2025  David King <dave@daveking.com>
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
###############################################################################
#  Calculate the fan speed of a Noctua fan when its green sensor wire is 
#  connected to a GPIO pin.  
#
#  See https://noctua.at/pub/media/wysiwyg/Noctua_PWM_specifications_white_paper.pdf
#
#  This is implemented using libgpiod 1.6.3, which is the version provided by Debain
#  Bookworm.

TACH_PIN = 'GPIO15'         #  Attach the fan's green wire to this pin
FAN_MAX_RPM = 5000          #  Check your fan's spec sheet.

#  By default we'll print log messages to the console
import logging
logger = logging.getLogger(__name__)
logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)

import gpiod
import threading
import queue
import time

#  The libgpiod API and its Python bindings have changed dramatically over
#  time.  Hence this warning ...
tested_version = '1.6.3'
if gpiod.version_string() != tested_version:
    logging.warning(f'This script was written for libgpiod version {tested_version}.  Since the API has\nseen signifcant changes between versions, this script may not work with the\nversion of libgpiod that is installed here, {gpiod.version_string()}')

#  Define a thread that will examine the falling edge events on a given pin and
#  push the elapsed time between those events, in nanoseconds, onto a queue for
#  processing by the main thread.
def collector_thread(q):
    last_nsec = None
    line = gpiod.find_line(TACH_PIN)
    chip = line.owner()
    try:
        line.request('fan_rpm', gpiod.LINE_REQ_EV_FALLING_EDGE, gpiod.LINE_REQ_FLAG_BIAS_PULL_UP)
        t = threading.current_thread()
        while getattr(t, "run_flag", True):
            if line.event_wait():
                for event in line.event_read_multiple():
                    if last_nsec:
                        q.put(event.nsec - last_nsec)
                    last_nsec = event.nsec
            #  Give the CPU a breather, so that we don't drive up the temp ourselves
            time.sleep(.5)  
    finally:
        chip.close()

def main_thread():
    #  Define a shared queue for event timings and start the thread that will
    #  populate that queue.
    q = queue.Queue()
    t = threading.Thread(target = collector_thread, args = (q, ))
    t.start()

    #  Use the gueued event timings to calculate the fan's RPM, and the percentage
    #  of full speed that represents.
    try:
        previous_rpm = 0
        while True:
            while not q.empty():
                #  Calulate the fan RPM
                #
                #  The formula depends on the output of your fan.  Check your fan's
                #  specification.  This formula is based on the Noctua white paper at
                #  the URL in the comments at the top of this script.
                rpm = 1000000000 / q.get() * 60 / 4
                #  libgpiod is interrupt driven and can miss events.  Later versions have
                #  an event sequence number that can be used to detect when this happens.
                #  Here, with v1.6.3, all we can do is some sort of sanity check to weed 
                #  out rpm calculations that are radically different from the one that 
                #  came before.
                if previous_rpm != 0 and abs(previous_rpm - rpm) / previous_rpm < .5:
                    #  Calculate the precentage fan speed 
                    percent = rpm / FAN_MAX_RPM * 100
                    #  Output
                    logger.info(f'RPM = {round(rpm)} ({round(percent)}%)')
                elif rpm == 0:
                    logger.info(f'RPM = 0 (0%)')
                previous_rpm = rpm
    except KeyboardInterrupt:
        #  Use Ctrl-C to cleanly terminate the script
        pass
    finally:
        #  On exit, terminate the collector thread
        t.run_flag = False
        t.join()
        print("")

if __name__ == '__main__':
    main_thread()
